/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/CustomKeyboardBase.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

CustomKeyboardBase::CustomKeyboardBase() :
    flexButtonCallback(this, &CustomKeyboardBase::flexButtonCallbackHandler)
{
    setWidth(320);
    setHeight(240);
    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_KEYBOARD_BACKGROUND_ID));
    add(image1);

    capslock.setBitmaps(Bitmap(BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID), Bitmap(BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID));
    capslock.setBitmapXY(0, 0);
    capslock.setVisible(false);
    capslock.setAction(flexButtonCallback);
    capslock.setPosition(5, 150, 56, 40);
    add(capslock);

    mode.setBitmaps(Bitmap(BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID), Bitmap(BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID));
    mode.setBitmapXY(0, 0);
    mode.setVisible(false);
    mode.setAction(flexButtonCallback);
    mode.setPosition(5, 193, 56, 40);
    add(mode);

    backspace.setBitmaps(Bitmap(BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID), Bitmap(BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID));
    backspace.setBitmapXY(0, 0);
    backspace.setVisible(false);
    backspace.setAction(flexButtonCallback);
    backspace.setPosition(258, 150, 56, 40);
    add(backspace);

    buffer.setPosition(12, 17, 296, 25);
    buffer.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    buffer.setLinespacing(0);
    bufferBuffer[0] = 0;
    buffer.setWildcard(bufferBuffer);
    buffer.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8CNS));
    add(buffer);
}

CustomKeyboardBase::~CustomKeyboardBase()
{

}

void CustomKeyboardBase::initialize()
{

}

void CustomKeyboardBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &capslock)
    {
        //capslockPressedHandler
        //When capslock clicked call virtual function
        //Call capslockPressedHandler
        capslockPressedHandler();
    }
    if (&src == &mode)
    {
        //modePressedHandler
        //When mode clicked call virtual function
        //Call modePressedHandler
        modePressedHandler();
    }
    if (&src == &backspace)
    {
        //backspacePressedHandler
        //When backspace clicked call virtual function
        //Call backspacePressedHandler
        backspacePressedHandler();
    }
}
