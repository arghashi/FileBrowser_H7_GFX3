/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FILEBROWSERVIEWBASE_HPP
#define FILEBROWSERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/filebrowser_screen/FileBrowserPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/ListLayout.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class FileBrowserViewBase : public touchgfx::View<FileBrowserPresenter>
{
public:
    FileBrowserViewBase();
    virtual ~FileBrowserViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void handleHomeClicked()
    {
        // Override and implement this function in FileBrowser
    }
    virtual void handleBackClicked()
    {
        // Override and implement this function in FileBrowser
    }
    virtual void handleNewFolderClicked()
    {
        // Override and implement this function in FileBrowser
    }
    virtual void handleNewFileClicked()
    {
        // Override and implement this function in FileBrowser
    }
    virtual void handleRenameClicked()
    {
        // Override and implement this function in FileBrowser
    }
    virtual void handleDeleteClicked()
    {
        // Override and implement this function in FileBrowser
    }
    virtual void handleFormatClicked()
    {
        // Override and implement this function in FileBrowser
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Container PathBar;
    touchgfx::Image image1;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnBack;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnHome;
    touchgfx::TextAreaWithOneWildcard txtPath;
    touchgfx::ScrollableContainer scrollFileList;
    touchgfx::ListLayout list;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnNewFolder;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnNewFile;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnRename;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnDelete;
    touchgfx::IconButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  >  btnFormat;
    touchgfx::CircleProgress progressStorage;
    touchgfx::PainterRGB565 progressStoragePainter;
    touchgfx::TextAreaWithOneWildcard txtStorageInfo;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TXTPATH_SIZE = 100;
    touchgfx::Unicode::UnicodeChar txtPathBuffer[TXTPATH_SIZE];
    static const uint16_t TXTSTORAGEINFO_SIZE = 100;
    touchgfx::Unicode::UnicodeChar txtStorageInfoBuffer[TXTSTORAGEINFO_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 15360;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<FileBrowserViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // FILEBROWSERVIEWBASE_HPP
